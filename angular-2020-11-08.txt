-----Directives---------
 are instructions in the DOM (Document Object Model). 
It specifies how to place our business logic in Angular. 
The directive is markers on a DOM element that tell Angular to attach a

----RouterLinkActive-------
Track the currently ative route .
Highlight the the currently active route

<li><a [routerLink]="['home']" routerLinkActive="active">Home</a></li>
 
<li><a [routerLink]="['product']" [routerLinkActive]="['active']">Product</a></li>
 

.active {
  background-color: yellow;
}

When the user navigates to any of the above routes,
 the Angular router adds the “active” class to the activated element.
And when the user navigates away the class will be removed.
------------------------------
 { path: '',   redirectTo: '/first-component', pathMatch: 'full' }, // redirect to `first-component`
  { path: '**', component: PageNotFoundComponent },  // Wildcard route for a 404 page
];

---------------
RouterModule.forRoot([
      { path: 'welcome', component: WelcomeComponent },
      { path: '', redirectTo: 'welcome', pathMatch: 'full' },
      { path: '**', component: 'pageNotFoundComponent' }
    ])
Case 1 pathMatch:'full': In this case, when app is launched on localhost:4200 (or some server) the default page will be welcome screen, since the url will be https://localhost:4200/

If https://localhost:4200/gibberish this will redirect to pageNotFound screen because of path:'**' wildcard

Case 2 pathMatch:'prefix':

If the routes have { path: '', redirectTo: 'welcome', pathMatch: 'prefix' }, now this will never reach the wildcard route since every url would match path:'' defined.